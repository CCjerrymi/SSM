<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
       xmlns:task="http://www.springframework.org/schema/task"       
       xsi:schemaLocation="
       http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.2.xsd
          http://www.springframework.org/schema/beans
     	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       	  http://www.springframework.org/schema/context 
       	  http://www.springframework.org/schema/context/spring-context-3.2.xsd
      	  http://www.springframework.org/schema/aop
	      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	      http://www.springframework.org/schema/tx
	      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		  http://www.springframework.org/schema/jdbc 
		  http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd 
		  http://www.springframework.org/schema/mvc      
          http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
		  ">
	<!-- 用注解方式注入bean -->
	<context:annotation-config />
	<!-- 扫描包 -->
	<context:component-scan base-package="com.dao;com.service;"/>
   
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 -->
 	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=utf-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean> 

	<mvc:annotation-driven/>
	<!-- 扫描对应包下的控制器 -->
	<context:component-scan base-package="com.controller"></context:component-scan>
  	<!-- 指定数据源，解析数据库配置文件，并设置数据源的属性 -->
	<!-- mysql  -->
		<!-- 指定数据源，解析数据库配置文件，并设置数据源的属性 -->
    <!-- 引用外部属性文件 -->
    <context:property-placeholder location="classpath:config/jdbc.properties" />
    
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"    destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        <property name="initialSize" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="80" />
		<property name="minIdle" value="1" />
	    <!--解决MySQL8小时问题  -->
	    <!--验证连接是否可用，使用的SQL语句  -->
	    <property name="validationQuery"  value= "SELECT 1" /> 
	    <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.  -->
        <property name="testWhileIdle" value= "true" />    
        <!-- 借出连接时不要测试，否则很影响性能 -->
        <property name="testOnBorrow" value= "false" /> 
        <!-- 每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value = "30000" /> 
        <!--池中的连接空闲30分钟后被回收,默认值就是30分钟。  -->
        <property name="minEvictableIdleTimeMillis" value = "1800000" /> 
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量，默认值就是3. -->
        <property name="numTestsPerEvictionRun" value="3"/>  
    </bean>  
 	 <!-- 此处会自动调用 MapperScannerConfigurer -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mybatisMapper/*Mapper.xml" />  
        <property name="configLocation" value="classpath:config/mybatis-configuration.xml" />
    </bean>
    
       <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
          <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
    <!--  扫描 xml配置文件及Dao接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage指定要扫描的包，在此包之下的映射器都会被 搜索到。可指定多个包，包与包之间用逗号或分号分隔com.abc.mapper -->
		<property name="basePackage" value="com.dao" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
	</bean>
 
   
   
    <!--  扫描 xml配置文件及Dao接口 -->
 <!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		basePackage指定要扫描的包，在此包之下的映射器都会被 搜索到。可指定多个包，包与包之间用逗号或分号分隔com.abc.mapper
		<property name="basePackage" value="com.dao" />
	</bean> -->
	
	
</beans>